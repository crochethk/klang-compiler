package cc.crochethk.compilerbau.praktikum;

import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.classfile.AccessFlags;
import java.lang.classfile.ClassBuilder;
import java.lang.classfile.ClassFile;
import java.lang.classfile.CodeBuilder;
import java.lang.constant.ClassDesc;
import java.lang.constant.ConstantDescs;
import java.lang.constant.MethodTypeDesc;
import java.lang.reflect.AccessFlag;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import cc.crochethk.compilerbau.praktikum.ast.BinOpExpr;
import cc.crochethk.compilerbau.praktikum.ast.BooleanLit;
import cc.crochethk.compilerbau.praktikum.ast.EmptyNode;
import cc.crochethk.compilerbau.praktikum.ast.FunCall;
import cc.crochethk.compilerbau.praktikum.ast.FunDef;
import cc.crochethk.compilerbau.praktikum.ast.IfElseStat;
import cc.crochethk.compilerbau.praktikum.ast.IntLit;
import cc.crochethk.compilerbau.praktikum.ast.Prog;
import cc.crochethk.compilerbau.praktikum.ast.ReturnStat;
import cc.crochethk.compilerbau.praktikum.ast.StatementListNode;
import cc.crochethk.compilerbau.praktikum.ast.TernaryConditionalExpr;
import cc.crochethk.compilerbau.praktikum.ast.UnaryOpExpr;
import cc.crochethk.compilerbau.praktikum.ast.Var;
import cc.crochethk.compilerbau.praktikum.ast.VarAssignStat;
import cc.crochethk.compilerbau.praktikum.ast.VarDeclareStat;
import cc.crochethk.compilerbau.praktikum.ast.types.*;

public class GenJBC implements Visitor<Void> {
    private static final String THE_PROGRAM_CLASS = "___TheProgram___";

    private Path outputDir;
    private ClassBuilder classBuilder = null;
    private CodeBuilder codeBuilder = null;

    private Map<String, FunDef> funDefs = new HashMap<>();

    /** 
     * Temporary offset store for local variables
     *  while the function's code is build 
     */
    private Map<String, Integer> vars = new HashMap<>();

    public GenJBC(String outputDir) {
        this.outputDir = Path.of(outputDir);
    }

    @Override
    public Void visit(Prog prog) {
        var classDesc = ClassDesc.of(THE_PROGRAM_CLASS);
        var bytes = ClassFile.of().build(classDesc, cb -> {
            this.classBuilder = cb;
            prog.funDefs.forEach(def -> def.accept(this));
            genMainMethod(cb, prog.entryPoint);
        });

        // Write generated bytes to file(s)
        try {
            Files.createDirectories(outputDir);
            var file = new FileOutputStream(outputDir.resolve(
                    THE_PROGRAM_CLASS + ".class").toFile());
            file.write(bytes);
            file.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    private void genMainMethod(ClassBuilder cb, FunCall entryPointCall) {
        var methDescriptor = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_String.arrayType());
        var methFlags = AccessFlags.ofMethod(AccessFlag.STATIC, AccessFlag.PUBLIC).flagsMask();
        cb.withMethod("main", methDescriptor, methFlags, mb -> {
            mb.withCode(cdb -> {
                this.codeBuilder = cdb;
                entryPointCall.accept(this);

                // black magic... necessary, else "control flow fall through"
                // "reverse engineered" by java-compiling the decompiled code again
                // and comparing to the self generated, not working bytecode.
                //
                // I guess it could be because of "___main___()" returning a long
                // and thus the "pop2" to clear the stack before terminating
                codeBuilder.pop2();
                codeBuilder.return_();
            });
        });
    }

    @Override
    public Void visit(FunDef funDef) {
        // Purge vars stored by previous funDef
        vars.clear();

        // TODO compute offset accordingly based on acutal parameter type

        int i = 0;
        final int SLOTS_PER_VAR = 2;
        for (var p : funDef.params) {
            vars.put(p.name(), i);
            i += SLOTS_PER_VAR;
        }

        // Add to function lookup table for later use
        funDefs.put(funDef.name, funDef);

        // TODO set actual return and parameter types based on actual funDef object
        var methDescriptor = MethodTypeDesc.of(
                ConstantDescs.CD_long, // <---- hardcoded return type for now
                funDef.params.stream().map(_ -> {
                    return ConstantDescs.CD_long; // <---- hardcoded parameter types for now
                }).toList());
        var methFlags = AccessFlags.ofMethod(AccessFlag.STATIC, AccessFlag.PUBLIC).flagsMask();
        classBuilder.withMethod(
                funDef.name,
                methDescriptor,
                methFlags,
                mb -> mb.withCode(cdb -> {
                    this.codeBuilder = cdb;
                    funDef.body.accept(this);
                }));
        return null;
    }

    @Override
    public Void visit(StatementListNode statementListNode) {
        statementListNode.value.accept(this);
        statementListNode.next.accept(this);
        return null;
    }

    @Override
    public Void visit(ReturnStat returnStat) {
        returnStat.expr.accept(this);
        codeBuilder.lreturn(); // TODO choose based on actual type
        return null;
    }

    @Override
    public Void visit(IntLit intLit) {
        codeBuilder.ldc(intLit.value);
        return null;
    }

    @Override
    public Void visit(BooleanLit booleanLit) {
        if (booleanLit.value) {
            // push "true" representation
            codeBuilder.iconst_1();
        } else {
            codeBuilder.iconst_0();
        }
        return null;
    }

    @Override
    public Void visit(BinOpExpr binOpExpr) {
        // load both operands
        binOpExpr.lhs.accept(this);
        binOpExpr.rhs.accept(this);

        // now operands should be loaded into idk... registers?

        switch (binOpExpr.op) {
            // TODO in case of float support these must be adjusted
            case BinOpExpr.BinaryOp.add -> codeBuilder.ladd();
            case BinOpExpr.BinaryOp.div -> codeBuilder.ldiv();
            default -> {
                throw new UnsupportedOperationException("Operation '" + binOpExpr.op + "' not yet implemented.");
            }
        }
        return null;
    }

    @Override
    public Void visit(FunCall funCall) {
        // load arguments before calling function
        funCall.args.forEach(arg -> arg.accept(this));

        var funDef = funDefs.get(funCall.name);
        var methDescriptor = MethodTypeDesc.of(
                ConstantDescs.CD_long, // <---- hardcoded return type for now
                funDef.params.stream().map(_ -> {
                    return ConstantDescs.CD_long; // <---- hardcoded arg types for now
                }).toList());
        codeBuilder.invokestatic(ClassDesc.of(THE_PROGRAM_CLASS), funCall.name, methDescriptor);
        return null;
    }

    @Override
    public Void visit(Var var) {
        // TODO differnetiate var types here
        var offset = vars.get(var.name);
        codeBuilder.lload(offset);
        return null;
    }

    @Override
    public Void visit(UnaryOpExpr unaryOpExpr) {
        // load operand
        unaryOpExpr.operand.accept(this);

        switch (unaryOpExpr.op) {
            case neg -> codeBuilder.lneg();
            case not -> {
                // TODO no idea whether this actually will work
                var _setFalse = codeBuilder.newLabel();
                var setFalse_ = codeBuilder.newLabel();
                codeBuilder.ifne(_setFalse); // if not is 0 -> jump to "_t"
                codeBuilder.iconst_1(); // set true
                codeBuilder.goto_(setFalse_);
                codeBuilder.labelBinding(_setFalse);
                codeBuilder.iconst_0(); // set false
                codeBuilder.labelBinding(setFalse_);
            }
            default -> {
                throw new UnsupportedOperationException("Unary operation '" + unaryOpExpr.op + "' not supported.");
            }
        }
        return null;
    }

    @Override
    public Void visit(TernaryConditionalExpr ternaryConditionalExpr) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Void visit(VarDeclareStat varDeclareStat) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Void visit(VarAssignStat varAssignStat) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Void visit(EmptyNode emptyNode) {
        // shouldn't need to generate anything, I guess...
        return null;
    }

    @Override
    public Void visit(IfElseStat ifElseStat) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Void visit(Type type) {
        // TODO Auto-generated method stub
        return null;
    }
}

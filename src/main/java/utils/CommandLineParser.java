/**
 * Basic command line parser. Use the argumentbuilder to configure options and flags.
 * When done call the {@code parse()} method, providing the {@code args} to parse.
 * The method will return a {@code CommandLineParser} instance providing access
 * to the parsed arguments using the keys defined in the first step.
 * 
 * This code is based on code generated by Claude.ai.
 */

package utils;

import java.util.*;

public class CommandLineParser {
    private final Map<String, Argument> argumentDefinitions;
    private final Map<String, String> parsedArguments;
    private final List<String> trailingArgs;
    private final boolean withTrailingArgs;

    private CommandLineParser(ArgumentBuilder builder, String[] args, boolean withTrailingArgs) {
        this.argumentDefinitions = builder.arguments;
        this.parsedArguments = new HashMap<>();
        this.trailingArgs = new ArrayList<>();
        this.withTrailingArgs = withTrailingArgs;
        parseAndValidate(args);
        applyDefaults();
    }

    public static record Argument(String name, boolean required, boolean hasValue, String defaultValue) {
    }

    public static class ArgumentBuilder {
        private final Map<String, Argument> arguments = new HashMap<>();
        private boolean withTrailingArgs = false;

        public ArgumentBuilder requiredArg(String name) {
            arguments.put(name, new Argument(name, true, true, null));
            return this;
        }

        public ArgumentBuilder optionalArg(String name) {
            arguments.put(name, new Argument(name, false, true, null));
            return this;
        }

        public ArgumentBuilder optionalArg(String name, String defaultValue) {
            arguments.put(name, new Argument(name, false, true, defaultValue));
            return this;
        }

        public ArgumentBuilder flag(String name) {
            arguments.put(name, new Argument(name, false, false, null));
            return this;
        }

        /** Require one or more unnamed trailing arguments. */
        public ArgumentBuilder withTrailingArgs() {
            this.withTrailingArgs = true;
            return this;
        }

        /**
         * @throws IllegalArgumentException if provided arguments do not match the configuration.
         */
        public CommandLineParser parse(String[] args) throws IllegalArgumentException {
            return new CommandLineParser(this, args, withTrailingArgs);
        }
    }

    private void parseAndValidate(String[] args) {
        Set<String> providedRequiredArgs = new HashSet<>();
        boolean reachedTrailingArgs = false;

        for (int i = 0; i < args.length; i++) {
            String current = args[i];

            // Check if we've hit the trailing arguments delimiter
            if (current.equals("--")) {
                if (!withTrailingArgs) {
                    throw new IllegalArgumentException("No trailing arguments allowed");
                }

                // Add all remaining arguments as trailing args
                for (int j = i + 1; j < args.length; j++) {
                    trailingArgs.add(args[j]);
                }
                break;
            }

            // If we haven't started trailing args and this isn't a flag
            if (!current.startsWith("-")) {
                reachedTrailingArgs = true;
                if (!withTrailingArgs) {
                    throw new IllegalArgumentException("No trailing arguments allowed");
                }
                trailingArgs.add(current);
                continue;
            }

            // If we've started collecting trailing args, no more flags allowed
            if (reachedTrailingArgs) {
                throw new IllegalArgumentException("No flags allowed after trailing arguments");
            }

            String key = current.startsWith("--") ? current.substring(2) : current.substring(1);

            if (!argumentDefinitions.containsKey(key)) {
                throw new IllegalArgumentException("Unknown argument: " + current);
            }

            Argument argDef = argumentDefinitions.get(key);

            if (argDef.hasValue) {
                if (i + 1 >= args.length || args[i + 1].startsWith("-")) {
                    throw new IllegalArgumentException("Missing value for argument: " + current);
                }
                parsedArguments.put(key, args[i + 1]);
                i++; // Skip the value as we've consumed it
            } else {
                // Flag provided
                parsedArguments.put(key, "true");
            }

            if (argDef.required) {
                providedRequiredArgs.add(key);
            }
        }

        // Validate all required arguments were provided
        Set<String> missingArgs = new HashSet<>();
        for (Map.Entry<String, Argument> entry : argumentDefinitions.entrySet()) {
            if (entry.getValue().required && !providedRequiredArgs.contains(entry.getKey())) {
                missingArgs.add(entry.getKey());
            }
        }

        if (!missingArgs.isEmpty()) {
            throw new IllegalArgumentException(
                    "Missing required arguments: " + String.join(", ", missingArgs));
        }

        if (withTrailingArgs && trailingArgs.isEmpty()) {
            throw new IllegalArgumentException("Missing required trailing arguments");

        }
    }

    private void applyDefaults() {
        for (Map.Entry<String, Argument> entry : argumentDefinitions.entrySet()) {
            String key = entry.getKey();
            Argument argDef = entry.getValue();

            if (!parsedArguments.containsKey(key) && argDef.defaultValue != null) {
                parsedArguments.put(key, argDef.defaultValue);
            }
        }
    }

    /**
     * @return An Optional containing the argument's value if an argument with
     * the specified name has been parsed; Empty Optional otherwise.
     */
    public Optional<String> getValue(String argName) {
        if (!argumentDefinitions.containsKey(argName)) {
            return Optional.empty();
        }
        return Optional.of(parsedArguments.get(argName));
    }

    public boolean hasFlag(String flagName) {
        if (!argumentDefinitions.containsKey(flagName)) {
            throw new IllegalArgumentException("Unkown flag: " + flagName);
        }
        String value = parsedArguments.get(flagName);
        return value != null && value.equals("true");
    }

    public List<String> getTrailingArgs() {
        return new ArrayList<>(trailingArgs);
    }

    public Map<String, String> getAllArguments() {
        return new HashMap<>(parsedArguments);
    }

    /**
     * Example usage of the parser. Run this class with "--help" for usage info
     * for this example.
     */
    public static void main(String[] args) {
        final String EXAMPLE_USAGE_INFO = """
                Usage: command OPTION... FLAG... [--] args...
                    args...                 The trailing args.
                Options:
                    --a-required-option <value>         Specify some mandatory named argument/value.
                    --the-optional-option <value>       Specify some named argument/value.
                Flags:
                    --enable-something       This flag enables something. (default: false)""";
        try {
            CommandLineParser exampleParser = new CommandLineParser.ArgumentBuilder()
                    .requiredArg("a-required-option")
                    .optionalArg("the-optional-option", "the default value, if not present")
                    .flag("enable-something")
                    .withTrailingArgs()
                    .parse(args);

            if (exampleParser.hasFlag("help")) {
                System.out.println(EXAMPLE_USAGE_INFO);
            }

            String theRequiredValue = exampleParser.getValue("a-required-option").get();
            String theOptionalValueOrDefault = exampleParser.getValue("the-optional-option").get();
            boolean theEnableSomethingFlag = exampleParser.hasFlag("enable-something");
            List<String> theTrailingArgs = exampleParser.getTrailingArgs();

            System.out.println("Mandatory value: " + theRequiredValue);
            System.out.println("Optional value or its default: " + theOptionalValueOrDefault);
            System.out.println("Should something be enabled? - " + theEnableSomethingFlag);
            System.out.println("Trailing arguments: " + theTrailingArgs);

        } catch (IllegalArgumentException e) {
            System.err.println("Error: " + e.getMessage());
            System.err.println(EXAMPLE_USAGE_INFO);
            System.exit(1);
        }
    }
}